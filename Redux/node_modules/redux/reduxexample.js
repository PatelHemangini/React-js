const redux=require('redux')
const reduxLogger=require('redux-logger')

const createStore=redux.createStore
const combineReducer=redux.combineReducers
const logger=reduxLogger.createLogger(); 

const A_BUY_CAKE='BUY_CAKE'
const A_BUY_ICECREAM='BUY_ICECREAM'
const buycake=()=>{
    return{
        type:A_BUY_CAKE,
        information:'About the cake'
    }
}
const buyicecream=()=>{
    return{
        type:A_BUY_ICECREAM,
        information:'About the Icecream'
    }
}
const cakestate={
    shopname:"HemanginiShop",
    numberofcake:10,
}
const icecreamstate={
    shopname:"HemanginiShop",
    numberoficecream:20
}
const cakereducer=(state=cakestate,action)=>{
    switch (action.type) {
        case A_BUY_CAKE:return{
            ...state,
            numberofcake:state.numberofcake-1
        }
            
           
        default:return state
            break;
    }
}
const icecreamreducer=(state=icecreamstate,action)=>{
    switch (action.type) {
        case A_BUY_ICECREAM:return{
            ...state,
            numberoficecream:state.numberoficecream-1
        }
            
           
        default:return state
            break;
    }
}
const rootReducer=combineReducer({
    Cake:cakereducer,
    Icecream:icecreamreducer})
    

const store=createStore(rootReducer,redux.applyMiddleware(logger));
console.log("initial state",store.getState());
const unsubscribe=store.subscribe(()=>console.log("updated state",store.getState()));
store.dispatch(buycake());
store.dispatch(buyicecream());
console.log(store.getState());
unsubscribe()

